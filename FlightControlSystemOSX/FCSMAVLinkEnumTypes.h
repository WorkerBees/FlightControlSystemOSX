//
//  FCSMAVLinkEnumTypes.h
//  FlightControlSystemOSX
//
//  Created by Craig Hughes on 8/26/14.
//  Copyright (c) 2014 Craig Hughes. All rights reserved.
//

#import "mavlink.h"

// These are defined by ArduPlane, not by MAVLink

typedef NS_ENUM(uint32_t, FCSCustomFlightMode)
{
    FCSCustomFlightMode_MANUAL        = 0,
    FCSCustomFlightMode_CIRCLE        = 1,
    FCSCustomFlightMode_STABILIZE     = 2,
    FCSCustomFlightMode_TRAINING      = 3,
    FCSCustomFlightMode_ACRO          = 4,
    FCSCustomFlightMode_FLY_BY_WIRE_A = 5,
    FCSCustomFlightMode_FLY_BY_WIRE_B = 6,
    FCSCustomFlightMode_CRUISE        = 7,
    FCSCustomFlightMode_AUTOTUNE      = 8,
    FCSCustomFlightMode_RESERVED_9    = 9,  // RESERVED FOR FUTURE USE
    FCSCustomFlightMode_AUTO          = 10,
    FCSCustomFlightMode_RTL           = 11,
    FCSCustomFlightMode_LOITER        = 12,
    FCSCustomFlightMode_RESERVED_13   = 13, // RESERVED FOR FUTURE USE
    FCSCustomFlightMode_RESERVED_14   = 14, // RESERVED FOR FUTURE USE
    FCSCustomFlightMode_GUIDED        = 15,
    FCSCustomFlightMode_INITIALIZING  = 16
};

typedef NS_ENUM(uint8_t, FCSMAVType)
{
    FCSMAVType_GENERIC = MAV_TYPE_GENERIC,
    FCSMAVType_FIXED_WING = MAV_TYPE_FIXED_WING,
    FCSMAVType_QUADROTOR = MAV_TYPE_QUADROTOR,
    FCSMAVType_COAXIAL = MAV_TYPE_COAXIAL,
    FCSMAVType_HELICOPTER = MAV_TYPE_HELICOPTER,
    FCSMAVType_ANTENNA_TRACKER = MAV_TYPE_ANTENNA_TRACKER,
    FCSMAVType_GCS = MAV_TYPE_GCS,
    FCSMAVType_AIRSHIP = MAV_TYPE_AIRSHIP,
    FCSMAVType_FREE_BALLOON = MAV_TYPE_FREE_BALLOON,
    FCSMAVType_ROCKET = MAV_TYPE_ROCKET,
    FCSMAVType_GROUND_ROVER = MAV_TYPE_GROUND_ROVER,
    FCSMAVType_SURFACE_BOAT = MAV_TYPE_SURFACE_BOAT,
    FCSMAVType_SUBMARINE = MAV_TYPE_SUBMARINE,
    FCSMAVType_HEXAROTOR = MAV_TYPE_HEXAROTOR,
    FCSMAVType_OCTOROTOR = MAV_TYPE_OCTOROTOR,
    FCSMAVType_TRICOPTER = MAV_TYPE_TRICOPTER,
    FCSMAVType_FLAPPING_WING = MAV_TYPE_FLAPPING_WING,
    FCSMAVType_KITE = MAV_TYPE_KITE,
};

typedef NS_ENUM(uint8_t, FCSAutopilotType)
{
    FCSAutoPilotType_GENERIC = MAV_AUTOPILOT_GENERIC,
    FCSAutoPilotType_PIXHAWK = MAV_AUTOPILOT_PIXHAWK,
    FCSAutoPilotType_SLUGS = MAV_AUTOPILOT_SLUGS,
    FCSAutoPilotType_ARDUPILOTMEGA = MAV_AUTOPILOT_ARDUPILOTMEGA,
    FCSAutoPilotType_OPENPILOT = MAV_AUTOPILOT_OPENPILOT,
    FCSAutoPilotType_GENERIC_WAYPOINTS_ONLY = MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY,
    FCSAutoPilotType_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY,
    FCSAutoPilotType_GENERIC_MISSION_FULL = MAV_AUTOPILOT_GENERIC_MISSION_FULL,
    FCSAutoPilotType_INVALID = MAV_AUTOPILOT_INVALID,
    FCSAutoPilotType_PPZ = MAV_AUTOPILOT_PPZ,
    FCSAutoPilotType_UDB = MAV_AUTOPILOT_UDB,
    FCSAutoPilotType_FP = MAV_AUTOPILOT_FP,
    FCSAutoPilotType_PX4 = MAV_AUTOPILOT_PX4,
};

typedef NS_OPTIONS(uint8_t, FCSBaseModeFlags)
{
    FCSBaseModeFlag_CUSTOM_MODE_ENABLED = MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
    FCSBaseModeFlag_TEST_ENABLED = MAV_MODE_FLAG_TEST_ENABLED,
    FCSBaseModeFlag_AUTO_ENABLED = MAV_MODE_FLAG_AUTO_ENABLED,
    FCSBaseModeFlag_GUIDED_ENABLED = MAV_MODE_FLAG_GUIDED_ENABLED,
    FCSBaseModeFlag_STABILIZE_ENABLED = MAV_MODE_FLAG_STABILIZE_ENABLED,
    FCSBaseModeFlag_HIL_ENABLED = MAV_MODE_FLAG_HIL_ENABLED,
    FCSBaseModeFlag_MANUAL_INPUT_ENABLED = MAV_MODE_FLAG_MANUAL_INPUT_ENABLED,
    FCSBaseModeFlag_SAFETY_ARMED = MAV_MODE_FLAG_SAFETY_ARMED,
};

typedef NS_ENUM(uint8_t, FCSMAVStateType)
{
    FCSMAVState_UNINIT = MAV_STATE_UNINIT,
    FCSMAVState_BOOT = MAV_STATE_BOOT,
    FCSMAVState_CALIBRATING = MAV_STATE_CALIBRATING,
    FCSMAVState_STANDBY = MAV_STATE_STANDBY,
    FCSMAVState_ACTIVE = MAV_STATE_ACTIVE,
    FCSMAVState_CRITICAL = MAV_STATE_CRITICAL,
    FCSMAVState_EMERGENCY = MAV_STATE_EMERGENCY,
    FCSMAVState_POWEROFF = MAV_STATE_POWEROFF,
};

typedef NS_ENUM(uint8_t, FCSMAVFrameType)
{
    FCSMavFrame_GLOBAL = MAV_FRAME_GLOBAL,
    FCSMavFrame_LOCAL_NED = MAV_FRAME_LOCAL_NED,
    FCSMavFrame_MISSION = MAV_FRAME_MISSION,
    FCSMavFrame_GLOBAL_RELATIVE_ALT = MAV_FRAME_GLOBAL_RELATIVE_ALT,
    FCSMavFrame_LOCAL_ENU = MAV_FRAME_LOCAL_ENU,
};

typedef NS_ENUM(uint16_t, FCSMAVCMDType)
{
    FCSMAVCMDType_NAV_WAYPOINT = MAV_CMD_NAV_WAYPOINT,
    FCSMAVCMDType_NAV_LOITER_UNLIM = MAV_CMD_NAV_LOITER_UNLIM,
    FCSMAVCMDType_NAV_LOITER_TURNS = MAV_CMD_NAV_LOITER_TURNS,
    FCSMAVCMDType_NAV_LOITER_TIME = MAV_CMD_NAV_LOITER_TIME,
    FCSMAVCMDType_NAV_RETURN_TO_LAUNCH = MAV_CMD_NAV_RETURN_TO_LAUNCH,
    FCSMAVCMDType_NAV_LAND = MAV_CMD_NAV_LAND,
    FCSMAVCMDType_NAV_TAKEOFF = MAV_CMD_NAV_TAKEOFF,
    FCSMAVCMDType_NAV_ROI = MAV_CMD_NAV_ROI,
    FCSMAVCMDType_NAV_PATHPLANNING = MAV_CMD_NAV_PATHPLANNING,
    FCSMAVCMDType_NAV_LAST = MAV_CMD_NAV_LAST,
    FCSMAVCMDType_CONDITION_DELAY = MAV_CMD_CONDITION_DELAY,
    FCSMAVCMDType_CONDITION_CHANGE_ALT = MAV_CMD_CONDITION_CHANGE_ALT,
    FCSMAVCMDType_CONDITION_DISTANCE = MAV_CMD_CONDITION_DISTANCE,
    FCSMAVCMDType_CONDITION_YAW = MAV_CMD_CONDITION_YAW,
    FCSMAVCMDType_CONDITION_LAST = MAV_CMD_CONDITION_LAST,
    FCSMAVCMDType_DO_SET_MODE = MAV_CMD_DO_SET_MODE,
    FCSMAVCMDType_DO_JUMP = MAV_CMD_DO_JUMP,
    FCSMAVCMDType_DO_CHANGE_SPEED = MAV_CMD_DO_CHANGE_SPEED,
    FCSMAVCMDType_DO_SET_HOME = MAV_CMD_DO_SET_HOME,
    FCSMAVCMDType_DO_SET_PARAMETER = MAV_CMD_DO_SET_PARAMETER,
    FCSMAVCMDType_DO_SET_RELAY = MAV_CMD_DO_SET_RELAY,
    FCSMAVCMDType_DO_REPEAT_RELAY = MAV_CMD_DO_REPEAT_RELAY,
    FCSMAVCMDType_DO_SET_SERVO = MAV_CMD_DO_SET_SERVO,
    FCSMAVCMDType_DO_REPEAT_SERVO = MAV_CMD_DO_REPEAT_SERVO,
    FCSMAVCMDType_DO_CONTROL_VIDEO = MAV_CMD_DO_CONTROL_VIDEO,
    FCSMAVCMDType_DO_LAST = MAV_CMD_DO_LAST,
    FCSMAVCMDType_PREFLIGHT_CALIBRATION = MAV_CMD_PREFLIGHT_CALIBRATION,
    FCSMAVCMDType_PREFLIGHT_SET_SENSOR_OFFSETS = MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS,
    FCSMAVCMDType_PREFLIGHT_STORAGE = MAV_CMD_PREFLIGHT_STORAGE,
    FCSMAVCMDType_PREFLIGHT_REBOOT_SHUTDOWN = MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN,
    FCSMAVCMDType_OVERRIDE_GOTO = MAV_CMD_OVERRIDE_GOTO,
    FCSMAVCMDType_MISSION_START = MAV_CMD_MISSION_START,
    FCSMAVCMDType_COMPONENT_ARM_DISARM = MAV_CMD_COMPONENT_ARM_DISARM,
};

typedef NS_ENUM(uint8_t, FCSMavMissionAckType)
{
    FCSMAVMissionAck_ACCEPTED = MAV_MISSION_ACCEPTED,
    FCSMAVMissionAck_ERROR = MAV_MISSION_ERROR,
    FCSMAVMissionAck_UNSUPPORTED_FRAME = MAV_MISSION_UNSUPPORTED_FRAME,
    FCSMAVMissionAck_UNSUPPORTED = MAV_MISSION_UNSUPPORTED,
    FCSMAVMissionAck_NO_SPACE = MAV_MISSION_NO_SPACE,
    FCSMAVMissionAck_INVALID = MAV_MISSION_INVALID,
    FCSMAVMissionAck_INVALID_PARAM1 = MAV_MISSION_INVALID_PARAM1,
    FCSMAVMissionAck_INVALID_PARAM2 = MAV_MISSION_INVALID_PARAM2,
    FCSMAVMissionAck_INVALID_PARAM3 = MAV_MISSION_INVALID_PARAM3,
    FCSMAVMissionAck_INVALID_PARAM4 = MAV_MISSION_INVALID_PARAM4,
    FCSMAVMissionAck_INVALID_PARAM5_X = MAV_MISSION_INVALID_PARAM5_X,
    FCSMAVMissionAck_INVALID_PARAM6_Y = MAV_MISSION_INVALID_PARAM6_Y,
    FCSMAVMissionAck_INVALID_PARAM7 = MAV_MISSION_INVALID_PARAM7,
    FCSMAVMissionAck_INVALID_SEQUENCE = MAV_MISSION_INVALID_SEQUENCE,
    FCSMAVMissionAck_DENIED = MAV_MISSION_DENIED,
};
